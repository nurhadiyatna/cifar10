'''Train a simple deep CNN on the CIFAR10 small images dataset.

It gets to 75% validation accuracy in 25 epochs, and 79% after 50 epochs.
(it's still underfitting at that point, though).
'''

from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import CSVLogger
import matplotlib.pyplot as plt
import os

batch_size = 32
num_classes = 10
epochs = 4
data_augmentation = True
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_cifar10_trained_model.h5'
csv_logger = CSVLogger('training.log',append=True)

# The data, shuffled and split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

class PlotLearning(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.i = 0
        self.x = []
        self.losses = []
        self.val_losses = []
        
        self.fig = plt.figure()
        
        self.logs = []

    def on_epoch_end(self, epoch, logs={}):
        
        self.logs.append(logs)
        self.x.append(self.i)
        self.losses.append(logs.get('loss'))
        self.val_losses.append(logs.get('val_loss'))
        self.i += 1
        
        # clear_output(wait=True)
        plt.plot(self.x, self.losses, label="loss")
        plt.plot(self.x, self.val_losses, label="val_loss")
        plt.legend()
        plt.show();
        
plot = PlotLearning()

# plot_losses = PlotLosses()

#history = LossHistory()
FEATURE_MAP = 10
for x in range(0,3):

	model = Sequential()
	model.add(Conv2D(FEATURE_MAP, (3, 3), padding='same',
	                 input_shape=x_train.shape[1:]))
	model.add(Activation('relu'))
	model.add(Conv2D(FEATURE_MAP, (3, 3)))
	model.add(Activation('relu'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.25))

	model.add(Conv2D(FEATURE_MAP, (3, 3), padding='same'))
	model.add(Activation('relu'))
	model.add(Conv2D(FEATURE_MAP, (3, 3)))
	model.add(Activation('relu'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.25))

	model.add(Flatten())
	model.add(Dense(512))
	model.add(Activation('relu'))
	model.add(Dropout(0.5))
	model.add(Dense(num_classes))
	model.add(Activation('softmax'))

	# initiate RMSprop optimizer
	opt = keras.optimizers.rmsprop(lr=0.01, decay=1e-6)




	# Let's train the model using RMSprop
	model.compile(loss='categorical_crossentropy',
	              optimizer=opt,
	              metrics=['accuracy'])

	x_train = x_train.astype('float32')
	x_test = x_test.astype('float32')
	x_train /= 255
	x_test /= 255
	if not data_augmentation:
	    print('Not using data augmentation.')
	    model.fit(x_train, y_train,
	              batch_size=batch_size,
	              epochs=epochs,
	              validation_data=(x_test, y_test),
	              shuffle=True)
	else:
	    print('Using real-time data augmentation.')
	    # This will do preprocessing and realtime data augmentation:
	    datagen = ImageDataGenerator(
	        featurewise_center=False,  # set input mean to 0 over the dataset
	        samplewise_center=False,  # set each sample mean to 0
	        featurewise_std_normalization=False,  # divide inputs by std of the dataset
	        samplewise_std_normalization=False,  # divide each input by its std
	        zca_whitening=False,  # apply ZCA whitening
	        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
	        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
	        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
	        horizontal_flip=True,  # randomly flip images
	        vertical_flip=False)  # randomly flip images

	    # Compute quantities required for feature-wise normalization
	    # (std, mean, and principal components if ZCA whitening is applied).
	    datagen.fit(x_train)

	    # Fit the model on the batches generated by datagen.flow().
	    history = model.fit_generator(datagen.flow(x_train, y_train,
	                                     batch_size=batch_size),
	                        epochs=epochs,callbacks = [plot],
	                        validation_data=(x_test, y_test),
	                        workers=4)

	# plt.plot(history.history['acc'])
	# plt.plot(history.history['val_acc'])
	# plt.title('model accuracy')
	# plt.ylabel('accuracy')
	# plt.xlabel('epoch')
	# plt.legend(['train', 'test'], loc='upper left')
	# plt.savefig('Acc_'+str(FEATURE_MAP)+'.png')
	# plt.show()

	# plt.plot(history.history['loss'])
	# plt.plot(history.history['val_loss'])
	# plt.title('model loss')
	# plt.ylabel('loss')
	# plt.xlabel('epoch')
	# plt.legend(['train', 'test'], loc='upper left')
	# plt.savefig('Loss_'+str(FEATURE_MAP)+'.png')
	# plt.show()

	FEATURE_MAP = FEATURE_MAP + 10
	# Save model and weights
	if not os.path.isdir(save_dir):
	    os.makedirs(save_dir)
	model_path = os.path.join(save_dir, model_name)
	model.save(model_path)
	print('Saved trained model at %s ' % model_path)

	# Score trained model.
	scores = model.evaluate(x_test, y_test, verbose=1)
	print('Test loss:', scores[0])
	print('Test accuracy:', scores[1])

